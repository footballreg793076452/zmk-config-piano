/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
//#include <dt-bindings/zmk/outputs.h>


        //           ╭──────────┬──────────┬─────────╮                                            ╭──────────┬──────────┬─────────╮
        //           |    0     |    1     |    2    |                                            |    3     |    4     |    5    |
        //╭──────────┼──────────┼──────────┼─────────┤                                            ├──────────┼──────────┼─────────┼──────────╮
        //|     6    |    7     |    8     |    9    |                                            |    10    |    11    |    12   |    13    |
        //╰──────────┴──────────┴──────────┴─────────┼─────────┬─────────╮   ╭─────────┬──────────┼──────────┴──────────┴─────────┴──────────╯
        //                                           |    14   |   15    |   |   16    |    17    |          	
        //                                           ╰─────────┴─────────╯   ╰─────────┴──────────╯


// Home row mods macro
// ----MacOS----
// CAGS--SGAC
#define MAC_HRML(k1,k2,k3,k4) &ht LCTRL k1  &ht LALT k2  &ht LGUI k3  &ht LSHFT k4
#define MAC_HRMR(k1,k2,k3,k4) &ht RSHFT k1  &ht RGUI k2  &ht RALT k3  &ht RCTRL k4

// ----Windows----
// GACS--SCAG
#define WIN_HRML(k1,k2,k3,k4) &ht LGUI k1  &ht LALT k2   &ht LCTRL k3  &ht LSHFT k4
#define WIN_HRMR(k1,k2,k3,k4) &ht RSHFT k1 &ht RCTRL k2  &ht RALT k3   &ht RGUI k4

#define MAC 0
#define WIN 1
#define LEF 2
#define RIG 3
#define TRI 4

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <RIG LEF>;
            then-layer = <TRI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        //layer 0
        default_layer {
        //           ╭──────────┬──────────┬─────────╮                                            ╭──────────┬──────────┬─────────╮
        //           |    w     |    e     |    r    |                                            |    u     |    i     |    o    |           
        //╭──────────┼──────────┼──────────┼─────────┤                                            ├──────────┼──────────┼─────────┼──────────╮
        //|     a    |    s     |    d     |    f    |                                            |    j     |    k     |    l    |   enter  |
        //╰──────────┴──────────┴──────────┴─────────┼─────────┬─────────╮   ╭─────────┬──────────┼──────────┴──────────┴─────────┴──────────╯
        //                                           |    g    |  BKSP   |   |  space  |    h     |
        //                                 	     ╰─────────┴─────────╯   ╰─────────┴──────────╯
            bindings = <
                       &kp W      &kp E     &kp R                                                  &kp U      &kp I     &kp O       
            MAC_HRML(A,    S,         D,        F)                                                 MAC_HRMR(J,    K,        L,        RET)    
                                                     &lt LEF G  &kp LPAR     &kp SPACE  &lt RIG H
            >;
        };

        //layer 1
        windows_layer {
        //           ╭──────────┬──────────┬─────────╮                                            ╭──────────┬──────────┬─────────╮
        //           |    w     |    e     |    r    |                                            |    u     |    i     |    o    |           
        //╭──────────┼──────────┼──────────┼─────────┤                                            ├──────────┼──────────┼─────────┼──────────╮
        //|     a    |    s     |    d     |    f    |                                            |    j     |    k     |    l    |   enter  |
        //╰──────────┴──────────┴──────────┴─────────┼─────────┬─────────╮   ╭─────────┬──────────┼──────────┴──────────┴─────────┴──────────╯
        //                                           |    g    |  BKSP   |   |  space  |    h     |
        //                                 	     ╰─────────┴─────────╯   ╰─────────┴──────────╯
            bindings = <
                       &kp W      &kp E     &kp R                                                  &kp U      &kp I     &kp O       
            WIN_HRML(A,    S,         D,        F)                                                 WIN_HRMR(J,    K,        L,        RET)    
                                                     &lt LEF G  &kp LPAR     &kp SPACE  &lt RIG H
            >;
        };

        //layer 2
        left_layer {
        //           ╭──────────┬──────────┬─────────╮                                            ╭──────────┬──────────┬─────────╮
        //           |    q     |    ;:    |    t    |                                            |     0    |    up    |         |           
        //╭──────────┼──────────┼──────────┼─────────┤                                            ├──────────┼──────────┼─────────┼──────────╮
        //|     z    |    x     |    c     |    v    |                                            |   left   |   down   |  right  |          |
        //╰──────────┴──────────┴──────────┴─────────┼─────────┬─────────╮   ╭─────────┬──────────┼──────────┴──────────┴─────────┴──────────╯
        //                                           |    b    |         |   |         |          |          	
        //                                 	     ╰─────────┴─────────╯   ╰─────────┴──────────╯
            bindings = <
                       &kp Q      &kp SEMI   &kp T                                                   &kp N0      &kp N9     &kp N0      
            &kp Z      &kp X      &kp C      &kp V                                                   &kp N0      &kp MINUS  &kp PLUS  &trans
                                                       	&kp B    &trans       &trans    &trans
            >;
        };

        //layer 3
        right_layer {

        //           ╭──────────┬──────────┬─────────╮                                            ╭──────────┬──────────┬─────────╮
        //           |     1    |    2     |    3    |                                            |    y     |    '     |    p    |          
        //╭──────────┼──────────┼──────────┼─────────┤                                            ├──────────┼──────────┼─────────┼──────────╮
        //|    4     |     5    |    6     |    7    |                                            |    m     |   , <    │   . >   │    /?    |
        //╰──────────┴──────────┴──────────┴─────────┼─────────┬─────────╮   ╭─────────┬──────────┼──────────┴──────────┴─────────┴──────────╯
        //                                           |    8    |    9    |   |         |    n     |
        //                                 	     ╰─────────┴─────────╯   ╰─────────┴──────────╯      
        bindings = <
                       &kp N1     &kp N2     &kp N3                                                  &kp Y      &kp SQT    &kp P       
            &kp N4     &kp N5     &kp N6     &kp N7                                                  &kp M      &kp COMMA   &kp DOT   &kp FSLH  
                                                       &kp N8   &kp N9        &trans    &kp N
            >;
        };

        //layer 4
        tri_layer {
        //           ╭──────────┬──────────┬─────────╮                                            ╭──────────┬──────────┬─────────╮
        //           |     !    |     @    |    #    |                                            |     &    |     *    |    (    |          
        //╭──────────┼──────────┼──────────┼─────────┤                                            ├──────────┼──────────┼─────────┼──────────╮
        //|    _     |     $    |     %    |    ^    |                                            |     )    |    +     |    _    |     =    |
        //╰──────────┴──────────┴──────────┴─────────┼─────────┬─────────╮   ╭─────────┬──────────┼──────────┴──────────┴─────────┴──────────╯
        //                                           |         |         |   |         |          |
        //                                 	     ╰─────────┴─────────╯   ╰─────────┴──────────╯
        bindings = <
                           &kp EXCL   &kp AT    &kp HASH                                                &kp AMPS  &kp KP_MULTIPLY &kp LPAR      
            &kp UNDERSCORE &kp DLLR   &kp PRCNT &kp CARET                                               &kp RPAR  &kp PLUS        &kp UNDERSCORE  &kp EQUAL   
                                                       	&trans    &trans      &trans    &trans
            >;
        };
    };
};
